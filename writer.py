import numpy as np


class FFWriter:
    def __init__(self, filename,
                 charges,
                 masses,
                 atom_types,
                 bond_types,
                 angle_types,
                 dihedral_types,
                 improper_types,
                 atoms=None,
                 cell=None,
                 virtual_sites=None):
        self.filename = filename
        self.masses = masses
        self.atom_types = atom_types
        self.charges = charges
        self.bond_types = bond_types
        self.angle_types = angle_types
        self.dihedral_types = dihedral_types
        self.improper_types = improper_types
        self.atoms_coordinates = atoms
        self.virtual_sites = virtual_sites
        self.cell = cell

    def writeLammps(self) -> None:
        if self.atoms_coordinates is None:
            atoms_number = len(self.atom_types)
            self.atoms_coordinates = np.zeros((atoms_number, 3))
        else:
            atoms_number = len(self.atoms_coordinates)

        molecules_number = atoms_number // len(self.atom_types)

        bonds_number = len(self.bond_types * molecules_number)
        angles_number = len(self.angle_types * molecules_number)
        dihedrals_number = len(self.dihedral_types * molecules_number)
        impropers_number = len(self.improper_types * molecules_number)

        if self.cell is None:
            self.cell = np.array([[.0, 20.0],
                                  [.0, 20.0],
                                  [.0, 20.0],
                                  [.0, .0, .0]], dtype=object)
        else:
            self.cell = np.array(self.cell)
            a = np.linalg.norm(self.cell[0])
            b = np.linalg.norm(self.cell[1])
            c = np.linalg.norm(self.cell[2])
            alpha = np.dot(self.cell[0], self.cell[1]) / a / b
            beta = np.dot(self.cell[0], self.cell[2]) / a / c
            gamma = np.dot(self.cell[1], self.cell[2]) / c / b
            
            lx = a 
            xy = b*gamma
            xz = c*beta
            ly = np.sqrt(b**2 - xy**2)
            yz = (b*c*alpha - xy*xz)/ly
            lz = np.sqrt(c**2 - xz**2 - yz**2)
            
            self.cell = np.array([[0, lx],
                                  [0, ly],
                                  [0, lz],
                                  [xy, xz, yz]], dtype=object)
        with open(self.filename[:self.filename.find('.')] + '.data', 'w', encoding='utf-8') as file:
            result = f'Generated by FFWriter\n\n'

            result += f'{atoms_number} atoms\n' \
                      f'{bonds_number} bonds\n' \
                      f'{angles_number} angles\n' \
                      f'{dihedrals_number} dihedrals \n' \
                      f'{impropers_number} impropers\n\n' \
                      f'{len(self.atom_types)} atom types\n' \
                      f'{len(self.bond_types)} bond types\n' \
                      f'{len(self.angle_types)} angle types\n' \
                      f'{len(self.dihedral_types)} dihedral types\n' \
                      f'{len(self.improper_types)} improper types\n\n'

            result += f'{self.cell[0][0]} {self.cell[0][1]} xlo xhi\n' \
                      f'{self.cell[1][0]} {self.cell[1][1]} ylo yhi\n' \
                      f'{self.cell[2][0]} {self.cell[2][1]} zlo zhi\n' \
                      f'{self.cell[3][0]} {self.cell[3][1]} {self.cell[3][2]} xy xz yz\n\n'

            result += f'Masses\n\n'
            for i, mass in enumerate(self.masses):
                result += f'{i + 1} {mass}\n'

            result += f'\nPair Coeffs\n\n'
            for i, atom_type in enumerate(self.atom_types):
                result += f'{i + 1} {atom_type["epsilon"]} {atom_type["sigma"]}\n'

            result += f'\nBond Coeffs\n\n'
            for i, bond_type in enumerate(self.bond_types):
                result += f'{i + 1} {bond_type["k"]} {bond_type["length"]}\n'

            result += f'\nAngle Coeffs\n\n'
            for i, angle_type in enumerate(self.angle_types):
                result += f'{i + 1} {angle_type["k"]} {angle_type["angle"]}\n'

            result += f'\nDihedral Coeffs\n\n'
            for i, dihedral_type in enumerate(self.dihedral_types):
                result += f'{i + 1} {dihedral_type["k1"]} {dihedral_type["k2"]} ' \
                          f'{dihedral_type["k3"]} {dihedral_type["k4"]}\n'

            result += f'\nImproper Coeffs\n\n'
            for i, improper_type in enumerate(self.improper_types):
                result += f'{i + 1} {improper_type["k2"]} -1 2\n'

            result += f'\nAtoms\n\n'
            for i in range(atoms_number):
                result += f'{i + 1} ' \
                          f'{atoms_number % len(self.atom_types) + 1} ' \
                          f'{i % len(self.atom_types) + 1} ' \
                          f'{self.charges[i % len(self.atom_types)]} ' \
                          f'{self.atoms_coordinates[i][0]} ' \
                          f'{self.atoms_coordinates[i][1]} ' \
                          f'{self.atoms_coordinates[i][2]}\n'

            result += f'\nBonds\n\n'
            for i in range(bonds_number):
                result += f'{i + 1} ' \
                          f'{i % len(self.bond_types) + 1} ' \
                          f'{self.bond_types[i % len(self.bond_types)]["atom1"]+1 + (i // len(self.bond_types))*len(self.atom_types)} ' \
                          f'{self.bond_types[i % len(self.bond_types)]["atom2"]+1 + (i // len(self.bond_types))*len(self.atom_types)}\n'

            result += f'\nAngles\n\n'
            for i in range(angles_number):
                result += f'{i + 1} ' \
                          f'{i % len(self.angle_types) + 1} ' \
                          f'{self.angle_types[i % len(self.angle_types)]["atom1"]+1 + (i // len(self.angle_types))*len(self.atom_types)} ' \
                          f'{self.angle_types[i % len(self.angle_types)]["atom2"]+1 + (i // len(self.angle_types))*len(self.atom_types)} ' \
                          f'{self.angle_types[i % len(self.angle_types)]["atom3"]+1 + (i // len(self.angle_types))*len(self.atom_types)}\n'

            result += f'\nDihedrals\n\n'
            for i in range(dihedrals_number):
                result += f'{i + 1} ' \
                          f'{i % len(self.dihedral_types) + 1} ' \
                          f'{self.dihedral_types[i % len(self.dihedral_types)]["atom1"]+1 + (i // len(self.dihedral_types))*len(self.atom_types)} ' \
                          f'{self.dihedral_types[i % len(self.dihedral_types)]["atom2"]+1 + (i // len(self.dihedral_types))*len(self.atom_types)} ' \
                          f'{self.dihedral_types[i % len(self.dihedral_types)]["atom3"]+1 + (i // len(self.dihedral_types))*len(self.atom_types)} ' \
                          f'{self.dihedral_types[i % len(self.dihedral_types)]["atom4"]+1 + (i // len(self.dihedral_types))*len(self.atom_types)}\n'

            result += f'\nImpropers\n\n'
            for i in range(impropers_number):
                result += f'{i + 1} ' \
                          f'{i % len(self.improper_types) + 1} ' \
                          f'{self.improper_types[i % len(self.improper_types)]["atom1"]+1 + (i // len(self.improper_types))*len(self.atom_types)} ' \
                          f'{self.improper_types[i % len(self.improper_types)]["atom2"]+1 + (i // len(self.improper_types))*len(self.atom_types)} ' \
                          f'{self.improper_types[i % len(self.improper_types)]["atom3"]+1 + (i // len(self.improper_types))*len(self.atom_types)} ' \
                          f'{self.improper_types[i % len(self.improper_types)]["atom4"]+1 + (i // len(self.improper_types))*len(self.atom_types)}\n'

            file.write(result)
            print("Success")
